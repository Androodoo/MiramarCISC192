# Lab: Menu-driven calculator 

Practice `if` chains vs. `switch`, input validation, and short-circuiting.

------

## Learning outcomes

By the end, students can:

- **Apply** `if`/`else` and `switch` to implement menu options.
- **Analyze** input to validate numeric values and reject errors.
- **Analyze** edge cases such as division by zero.
- **Apply** `enum class` for type-safe menu choices.
- **Analyze** conditions using short-circuiting and scope control.
- **Create** a complete interactive calculator integrating input, decisions, and arithmetic.

------

## Prerequisite

- Decision and switch statements

## What do you need to complete this exercise?

- Submit your responses in a Markdown file on GitHub, and include a brief reflection on the challenges you encountered during the lab.
- Ensure that all code included in the Markdown file runs without errors. Refer to [Submitting Your Assignment Using GitHub](https://sdccd-edu.zoom.us/rec/share/F4rK6ZABMXlRn4aGlZ9P005e-iRKwq8rr9KuawDoJ77TdkybKU2tpf4l4QSe113g.ut4jpVaqaPY0oI7b?startTime=1725121532000) for detailed instructions.
- Record a video of yourself explaining the code. Use a desktop or laptop to write and demonstrate the code, making sure that both your screen and your image are visible. If you do not have a laptop, you may borrow one from the library for the semester.

### Requirements

1. Show menu: add, subtract, multiply, divide, quit. Use `enum class` and `switch`.
2. Read two `double` operands with validation; reject non-numeric input.
3. For divide: detect division by zero using `if (b == 0)`; keep the program running.

## Challenges

Please describe the challenges you faced during the exercise.

```python
# MiramarCISC192
Challenges I faced while coding this assignment:
1) One big challenged that I faced was in the entire chunk of code from lines 34-60. The syntax was a little bit tricky but after a few repetitions it became a smooth process.
2) Another challenged I faced was realizing that in the division case, I needed to include a dividing by zero error, so I added an if statement to point out if a number is being divided by zero.
3) A challenge that I'm currently facing is keeping the program running after trying to divide by zero. In java class, I think we used a while loop to keep the program running but we haven't learned it in this class. I'm also on a time crunch so I will figure this out after I submit this assignment.

```

## Write code here

Copy your working code from an IDE (e.g., Visual Studio or any other you prefer) and enclose it between triple backticks (``` ) when submitting.

**Calculator.cpp**

```cpp
#include <iostream>
using namespace std;

// CALCULATOR

    /* 
    I will be using enum for
    add a
    subtract s
    multiply m
    divide d
    */

enum class Operation { Add = 'a', Subtract = 's', Multiply = 'm', Divide = 'd'};

int main()
{

double number{};
cout << "Enter a value ";
if(!(cin >> number)){
    cerr << "Not a valid number. " << endl;
    return 1;
}
double secondNumber{};
cout << number << " added, subtracted, multiplied, or divided by (input second number here): ";
if(!(cin >> secondNumber)){
    cerr << "Not a valid number. " << endl;
    return 1; //1 for invalid input
}

//Here we will read the operation that the user wants with the enum

cout << "select your operator (a), (s), (m), (d): ";
char mathOperator{};
cin >> mathOperator;
switch(static_cast<Operation>(mathOperator)){
    case Operation::Add:
        cout << number << " + " << secondNumber << " = " << (number + secondNumber);
            break;

    case Operation::Subtract:
        cout << number << " - " << secondNumber << " = " << (number - secondNumber);
            break;

    case Operation::Multiply:
        cout << number << " * " << secondNumber << " = " << (number * secondNumber);
            break;

    case Operation::Divide:
        if(secondNumber == 0){
            cerr << "Dividing by zero; Error." << endl;
            return 2; //2 for diving by 0 error
        }
        else{cout << number << " / " << secondNumber << " = " << (number / secondNumber);}
            break;
    default:
        cerr << "Not a valid operator; use 'a' to add, 's' to subtract, 'm' to multiply, or 'd' to divide.";
        return 1; //1 for invalid input
}

return 0; //0 for good :)
}
```

## Paste video link here

```
https://youtu.be/lI2vRrfWD4o
```

<br>
<br>
<br>
<br>

**End of exercise**
